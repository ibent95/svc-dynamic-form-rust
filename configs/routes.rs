// Auto-generated by build.rs

use actix_web::{get, web::ServiceConfig, HttpResponse, Responder};
use svc::controllers::publication_controller::index as publication_controller_index;
use svc::controllers::publication_controller::details as publication_controller_details;
use svc::controllers::publication_controller::create as publication_controller_create;
use svc::controllers::publication_controller::update as publication_controller_update;
use svc::controllers::publication_controller::delete as publication_controller_delete;
use svc::controllers::handle_request_controller::handle_json as handle_request_controller_handle_json;
use svc::controllers::handle_request_controller::handle_form as handle_request_controller_handle_form;
use svc::controllers::handle_request_controller::handle_multipart as handle_request_controller_handle_multipart;

#[get("/healthz")]

pub async fn health_check() -> impl Responder {
    HttpResponse::Ok()
        .json(serde_json::json!({ "status": "ok" }))
}

pub fn web_config(cfg: &mut ServiceConfig) {

    // Static route
    cfg.service(health_check);

}

pub fn api_config(cfg: &mut ServiceConfig) {

    // AUTO-GENERATED ROUTES BELOW
    cfg.service(publication_controller_index);
    cfg.service(publication_controller_details);
    cfg.service(publication_controller_create);
    cfg.service(publication_controller_update);
    cfg.service(publication_controller_delete);
    cfg.service(handle_request_controller_handle_json);
    cfg.service(handle_request_controller_handle_form);
    cfg.service(handle_request_controller_handle_multipart);

}
